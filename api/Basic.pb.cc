// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Basic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Basic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace api {

namespace {

const ::google::protobuf::Descriptor* GridVertex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GridVertex_reflection_ = NULL;
const ::google::protobuf::Descriptor* Grid_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Grid_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimulationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimulationInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Basic_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_Basic_2eproto() {
  protobuf_AddDesc_Basic_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Basic.proto");
  GOOGLE_CHECK(file != NULL);
  GridVertex_descriptor_ = file->message_type(0);
  static const int GridVertex_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridVertex, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridVertex, xcoord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridVertex, ycoord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridVertex, zcoord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridVertex, neighbors_),
  };
  GridVertex_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GridVertex_descriptor_,
      GridVertex::default_instance_,
      GridVertex_offsets_,
      -1,
      -1,
      -1,
      sizeof(GridVertex),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridVertex, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GridVertex, _is_default_instance_));
  Grid_descriptor_ = file->message_type(1);
  static const int Grid_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, totalverts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, vertices_),
  };
  Grid_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Grid_descriptor_,
      Grid::default_instance_,
      Grid_offsets_,
      -1,
      -1,
      -1,
      sizeof(Grid),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grid, _is_default_instance_));
  SimulationInfo_descriptor_ = file->message_type(2);
  static const int SimulationInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationInfo, elevations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationInfo, sediment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationInfo, plates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationInfo, speeds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationInfo, age_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationInfo, tempurature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationInfo, precipitation_),
  };
  SimulationInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SimulationInfo_descriptor_,
      SimulationInfo::default_instance_,
      SimulationInfo_offsets_,
      -1,
      -1,
      -1,
      sizeof(SimulationInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationInfo, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimulationInfo, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Basic_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GridVertex_descriptor_, &GridVertex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Grid_descriptor_, &Grid::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SimulationInfo_descriptor_, &SimulationInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Basic_2eproto() {
  delete GridVertex::default_instance_;
  delete GridVertex_reflection_;
  delete Grid::default_instance_;
  delete Grid_reflection_;
  delete SimulationInfo::default_instance_;
  delete SimulationInfo_reflection_;
}

void protobuf_AddDesc_Basic_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_Basic_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Basic.proto\022\003api\"^\n\nGridVertex\022\r\n\005inde"
    "x\030\001 \001(\r\022\016\n\006xCoord\030\002 \001(\002\022\016\n\006yCoord\030\003 \001(\002\022"
    "\016\n\006zCoord\030\004 \001(\002\022\021\n\tneighbors\030\005 \003(\r\"=\n\004Gr"
    "id\022\022\n\ntotalVerts\030\001 \001(\r\022!\n\010vertices\030\003 \003(\013"
    "2\017.api.GridVertex\"\217\001\n\016SimulationInfo\022\022\n\n"
    "elevations\030\002 \003(\002\022\020\n\010sediment\030\004 \003(\002\022\016\n\006pl"
    "ates\030\005 \003(\005\022\016\n\006speeds\030\006 \003(\002\022\013\n\003age\030\007 \001(\001\022"
    "\023\n\013tempurature\030\010 \003(\002\022\025\n\rprecipitation\030\t "
    "\003(\0022E\n\014WorldBuilder\0225\n\rGenerateWorld\022\t.a"
    "pi.Grid\032\023.api.SimulationInfo\"\000(\0010\001b\006prot"
    "o3", 402);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Basic.proto", &protobuf_RegisterTypes);
  GridVertex::default_instance_ = new GridVertex();
  Grid::default_instance_ = new Grid();
  SimulationInfo::default_instance_ = new SimulationInfo();
  GridVertex::default_instance_->InitAsDefaultInstance();
  Grid::default_instance_->InitAsDefaultInstance();
  SimulationInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Basic_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Basic_2eproto {
  StaticDescriptorInitializer_Basic_2eproto() {
    protobuf_AddDesc_Basic_2eproto();
  }
} static_descriptor_initializer_Basic_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GridVertex::kIndexFieldNumber;
const int GridVertex::kXCoordFieldNumber;
const int GridVertex::kYCoordFieldNumber;
const int GridVertex::kZCoordFieldNumber;
const int GridVertex::kNeighborsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GridVertex::GridVertex()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.GridVertex)
}

void GridVertex::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

GridVertex::GridVertex(const GridVertex& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:api.GridVertex)
}

void GridVertex::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  index_ = 0u;
  xcoord_ = 0;
  ycoord_ = 0;
  zcoord_ = 0;
}

GridVertex::~GridVertex() {
  // @@protoc_insertion_point(destructor:api.GridVertex)
  SharedDtor();
}

void GridVertex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GridVertex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GridVertex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GridVertex_descriptor_;
}

const GridVertex& GridVertex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Basic_2eproto();
  return *default_instance_;
}

GridVertex* GridVertex::default_instance_ = NULL;

GridVertex* GridVertex::New(::google::protobuf::Arena* arena) const {
  GridVertex* n = new GridVertex;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GridVertex::Clear() {
// @@protoc_insertion_point(message_clear_start:api.GridVertex)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GridVertex, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GridVertex*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(index_, zcoord_);

#undef ZR_HELPER_
#undef ZR_

  neighbors_.Clear();
}

bool GridVertex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.GridVertex)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_xCoord;
        break;
      }

      // optional float xCoord = 2;
      case 2: {
        if (tag == 21) {
         parse_xCoord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xcoord_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_yCoord;
        break;
      }

      // optional float yCoord = 3;
      case 3: {
        if (tag == 29) {
         parse_yCoord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ycoord_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_zCoord;
        break;
      }

      // optional float zCoord = 4;
      case 4: {
        if (tag == 37) {
         parse_zCoord:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zcoord_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_neighbors;
        break;
      }

      // repeated uint32 neighbors = 5;
      case 5: {
        if (tag == 42) {
         parse_neighbors:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_neighbors())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42, input, this->mutable_neighbors())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.GridVertex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.GridVertex)
  return false;
#undef DO_
}

void GridVertex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.GridVertex)
  // optional uint32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // optional float xCoord = 2;
  if (this->xcoord() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->xcoord(), output);
  }

  // optional float yCoord = 3;
  if (this->ycoord() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ycoord(), output);
  }

  // optional float zCoord = 4;
  if (this->zcoord() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->zcoord(), output);
  }

  // repeated uint32 neighbors = 5;
  if (this->neighbors_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_neighbors_cached_byte_size_);
  }
  for (int i = 0; i < this->neighbors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->neighbors(i), output);
  }

  // @@protoc_insertion_point(serialize_end:api.GridVertex)
}

::google::protobuf::uint8* GridVertex::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.GridVertex)
  // optional uint32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // optional float xCoord = 2;
  if (this->xcoord() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->xcoord(), target);
  }

  // optional float yCoord = 3;
  if (this->ycoord() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ycoord(), target);
  }

  // optional float zCoord = 4;
  if (this->zcoord() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->zcoord(), target);
  }

  // repeated uint32 neighbors = 5;
  if (this->neighbors_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _neighbors_cached_byte_size_, target);
  }
  for (int i = 0; i < this->neighbors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->neighbors(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:api.GridVertex)
  return target;
}

int GridVertex::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:api.GridVertex)
  int total_size = 0;

  // optional uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  // optional float xCoord = 2;
  if (this->xcoord() != 0) {
    total_size += 1 + 4;
  }

  // optional float yCoord = 3;
  if (this->ycoord() != 0) {
    total_size += 1 + 4;
  }

  // optional float zCoord = 4;
  if (this->zcoord() != 0) {
    total_size += 1 + 4;
  }

  // repeated uint32 neighbors = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->neighbors_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->neighbors(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _neighbors_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridVertex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.GridVertex)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GridVertex* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GridVertex>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.GridVertex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.GridVertex)
    MergeFrom(*source);
  }
}

void GridVertex::MergeFrom(const GridVertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.GridVertex)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  neighbors_.MergeFrom(from.neighbors_);
  if (from.index() != 0) {
    set_index(from.index());
  }
  if (from.xcoord() != 0) {
    set_xcoord(from.xcoord());
  }
  if (from.ycoord() != 0) {
    set_ycoord(from.ycoord());
  }
  if (from.zcoord() != 0) {
    set_zcoord(from.zcoord());
  }
}

void GridVertex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.GridVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridVertex::CopyFrom(const GridVertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.GridVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridVertex::IsInitialized() const {

  return true;
}

void GridVertex::Swap(GridVertex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GridVertex::InternalSwap(GridVertex* other) {
  std::swap(index_, other->index_);
  std::swap(xcoord_, other->xcoord_);
  std::swap(ycoord_, other->ycoord_);
  std::swap(zcoord_, other->zcoord_);
  neighbors_.UnsafeArenaSwap(&other->neighbors_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GridVertex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GridVertex_descriptor_;
  metadata.reflection = GridVertex_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GridVertex

// optional uint32 index = 1;
void GridVertex::clear_index() {
  index_ = 0u;
}
 ::google::protobuf::uint32 GridVertex::index() const {
  // @@protoc_insertion_point(field_get:api.GridVertex.index)
  return index_;
}
 void GridVertex::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:api.GridVertex.index)
}

// optional float xCoord = 2;
void GridVertex::clear_xcoord() {
  xcoord_ = 0;
}
 float GridVertex::xcoord() const {
  // @@protoc_insertion_point(field_get:api.GridVertex.xCoord)
  return xcoord_;
}
 void GridVertex::set_xcoord(float value) {
  
  xcoord_ = value;
  // @@protoc_insertion_point(field_set:api.GridVertex.xCoord)
}

// optional float yCoord = 3;
void GridVertex::clear_ycoord() {
  ycoord_ = 0;
}
 float GridVertex::ycoord() const {
  // @@protoc_insertion_point(field_get:api.GridVertex.yCoord)
  return ycoord_;
}
 void GridVertex::set_ycoord(float value) {
  
  ycoord_ = value;
  // @@protoc_insertion_point(field_set:api.GridVertex.yCoord)
}

// optional float zCoord = 4;
void GridVertex::clear_zcoord() {
  zcoord_ = 0;
}
 float GridVertex::zcoord() const {
  // @@protoc_insertion_point(field_get:api.GridVertex.zCoord)
  return zcoord_;
}
 void GridVertex::set_zcoord(float value) {
  
  zcoord_ = value;
  // @@protoc_insertion_point(field_set:api.GridVertex.zCoord)
}

// repeated uint32 neighbors = 5;
int GridVertex::neighbors_size() const {
  return neighbors_.size();
}
void GridVertex::clear_neighbors() {
  neighbors_.Clear();
}
 ::google::protobuf::uint32 GridVertex::neighbors(int index) const {
  // @@protoc_insertion_point(field_get:api.GridVertex.neighbors)
  return neighbors_.Get(index);
}
 void GridVertex::set_neighbors(int index, ::google::protobuf::uint32 value) {
  neighbors_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.GridVertex.neighbors)
}
 void GridVertex::add_neighbors(::google::protobuf::uint32 value) {
  neighbors_.Add(value);
  // @@protoc_insertion_point(field_add:api.GridVertex.neighbors)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GridVertex::neighbors() const {
  // @@protoc_insertion_point(field_list:api.GridVertex.neighbors)
  return neighbors_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GridVertex::mutable_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:api.GridVertex.neighbors)
  return &neighbors_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grid::kTotalVertsFieldNumber;
const int Grid::kVerticesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grid::Grid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.Grid)
}

void Grid::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Grid::Grid(const Grid& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:api.Grid)
}

void Grid::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  totalverts_ = 0u;
}

Grid::~Grid() {
  // @@protoc_insertion_point(destructor:api.Grid)
  SharedDtor();
}

void Grid::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Grid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grid::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Grid_descriptor_;
}

const Grid& Grid::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Basic_2eproto();
  return *default_instance_;
}

Grid* Grid::default_instance_ = NULL;

Grid* Grid::New(::google::protobuf::Arena* arena) const {
  Grid* n = new Grid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grid::Clear() {
// @@protoc_insertion_point(message_clear_start:api.Grid)
  totalverts_ = 0u;
  vertices_.Clear();
}

bool Grid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.Grid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 totalVerts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalverts_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vertices;
        break;
      }

      // repeated .api.GridVertex vertices = 3;
      case 3: {
        if (tag == 26) {
         parse_vertices:
          DO_(input->IncrementRecursionDepth());
         parse_loop_vertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vertices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_vertices;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.Grid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.Grid)
  return false;
#undef DO_
}

void Grid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.Grid)
  // optional uint32 totalVerts = 1;
  if (this->totalverts() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->totalverts(), output);
  }

  // repeated .api.GridVertex vertices = 3;
  for (unsigned int i = 0, n = this->vertices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vertices(i), output);
  }

  // @@protoc_insertion_point(serialize_end:api.Grid)
}

::google::protobuf::uint8* Grid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.Grid)
  // optional uint32 totalVerts = 1;
  if (this->totalverts() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->totalverts(), target);
  }

  // repeated .api.GridVertex vertices = 3;
  for (unsigned int i = 0, n = this->vertices_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->vertices(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:api.Grid)
  return target;
}

int Grid::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:api.Grid)
  int total_size = 0;

  // optional uint32 totalVerts = 1;
  if (this->totalverts() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->totalverts());
  }

  // repeated .api.GridVertex vertices = 3;
  total_size += 1 * this->vertices_size();
  for (int i = 0; i < this->vertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vertices(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.Grid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Grid* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Grid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.Grid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.Grid)
    MergeFrom(*source);
  }
}

void Grid::MergeFrom(const Grid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.Grid)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  vertices_.MergeFrom(from.vertices_);
  if (from.totalverts() != 0) {
    set_totalverts(from.totalverts());
  }
}

void Grid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.Grid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grid::CopyFrom(const Grid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.Grid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grid::IsInitialized() const {

  return true;
}

void Grid::Swap(Grid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grid::InternalSwap(Grid* other) {
  std::swap(totalverts_, other->totalverts_);
  vertices_.UnsafeArenaSwap(&other->vertices_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grid::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Grid_descriptor_;
  metadata.reflection = Grid_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grid

// optional uint32 totalVerts = 1;
void Grid::clear_totalverts() {
  totalverts_ = 0u;
}
 ::google::protobuf::uint32 Grid::totalverts() const {
  // @@protoc_insertion_point(field_get:api.Grid.totalVerts)
  return totalverts_;
}
 void Grid::set_totalverts(::google::protobuf::uint32 value) {
  
  totalverts_ = value;
  // @@protoc_insertion_point(field_set:api.Grid.totalVerts)
}

// repeated .api.GridVertex vertices = 3;
int Grid::vertices_size() const {
  return vertices_.size();
}
void Grid::clear_vertices() {
  vertices_.Clear();
}
const ::api::GridVertex& Grid::vertices(int index) const {
  // @@protoc_insertion_point(field_get:api.Grid.vertices)
  return vertices_.Get(index);
}
::api::GridVertex* Grid::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:api.Grid.vertices)
  return vertices_.Mutable(index);
}
::api::GridVertex* Grid::add_vertices() {
  // @@protoc_insertion_point(field_add:api.Grid.vertices)
  return vertices_.Add();
}
::google::protobuf::RepeatedPtrField< ::api::GridVertex >*
Grid::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:api.Grid.vertices)
  return &vertices_;
}
const ::google::protobuf::RepeatedPtrField< ::api::GridVertex >&
Grid::vertices() const {
  // @@protoc_insertion_point(field_list:api.Grid.vertices)
  return vertices_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimulationInfo::kElevationsFieldNumber;
const int SimulationInfo::kSedimentFieldNumber;
const int SimulationInfo::kPlatesFieldNumber;
const int SimulationInfo::kSpeedsFieldNumber;
const int SimulationInfo::kAgeFieldNumber;
const int SimulationInfo::kTempuratureFieldNumber;
const int SimulationInfo::kPrecipitationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimulationInfo::SimulationInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:api.SimulationInfo)
}

void SimulationInfo::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SimulationInfo::SimulationInfo(const SimulationInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:api.SimulationInfo)
}

void SimulationInfo::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  age_ = 0;
}

SimulationInfo::~SimulationInfo() {
  // @@protoc_insertion_point(destructor:api.SimulationInfo)
  SharedDtor();
}

void SimulationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimulationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimulationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimulationInfo_descriptor_;
}

const SimulationInfo& SimulationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Basic_2eproto();
  return *default_instance_;
}

SimulationInfo* SimulationInfo::default_instance_ = NULL;

SimulationInfo* SimulationInfo::New(::google::protobuf::Arena* arena) const {
  SimulationInfo* n = new SimulationInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SimulationInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:api.SimulationInfo)
  age_ = 0;
  elevations_.Clear();
  sediment_.Clear();
  plates_.Clear();
  speeds_.Clear();
  tempurature_.Clear();
  precipitation_.Clear();
}

bool SimulationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:api.SimulationInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float elevations = 2;
      case 2: {
        if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_elevations())));
        } else if (tag == 21) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18, input, this->mutable_elevations())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_sediment;
        break;
      }

      // repeated float sediment = 4;
      case 4: {
        if (tag == 34) {
         parse_sediment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_sediment())));
        } else if (tag == 37) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 34, input, this->mutable_sediment())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_plates;
        break;
      }

      // repeated int32 plates = 5;
      case 5: {
        if (tag == 42) {
         parse_plates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_plates())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42, input, this->mutable_plates())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_speeds;
        break;
      }

      // repeated float speeds = 6;
      case 6: {
        if (tag == 50) {
         parse_speeds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_speeds())));
        } else if (tag == 53) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 50, input, this->mutable_speeds())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_age;
        break;
      }

      // optional double age = 7;
      case 7: {
        if (tag == 57) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &age_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_tempurature;
        break;
      }

      // repeated float tempurature = 8;
      case 8: {
        if (tag == 66) {
         parse_tempurature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_tempurature())));
        } else if (tag == 69) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 66, input, this->mutable_tempurature())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_precipitation;
        break;
      }

      // repeated float precipitation = 9;
      case 9: {
        if (tag == 74) {
         parse_precipitation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_precipitation())));
        } else if (tag == 77) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 74, input, this->mutable_precipitation())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:api.SimulationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:api.SimulationInfo)
  return false;
#undef DO_
}

void SimulationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:api.SimulationInfo)
  // repeated float elevations = 2;
  if (this->elevations_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_elevations_cached_byte_size_);
  }
  for (int i = 0; i < this->elevations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->elevations(i), output);
  }

  // repeated float sediment = 4;
  if (this->sediment_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_sediment_cached_byte_size_);
  }
  for (int i = 0; i < this->sediment_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->sediment(i), output);
  }

  // repeated int32 plates = 5;
  if (this->plates_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_plates_cached_byte_size_);
  }
  for (int i = 0; i < this->plates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->plates(i), output);
  }

  // repeated float speeds = 6;
  if (this->speeds_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_speeds_cached_byte_size_);
  }
  for (int i = 0; i < this->speeds_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->speeds(i), output);
  }

  // optional double age = 7;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->age(), output);
  }

  // repeated float tempurature = 8;
  if (this->tempurature_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tempurature_cached_byte_size_);
  }
  for (int i = 0; i < this->tempurature_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->tempurature(i), output);
  }

  // repeated float precipitation = 9;
  if (this->precipitation_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_precipitation_cached_byte_size_);
  }
  for (int i = 0; i < this->precipitation_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->precipitation(i), output);
  }

  // @@protoc_insertion_point(serialize_end:api.SimulationInfo)
}

::google::protobuf::uint8* SimulationInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:api.SimulationInfo)
  // repeated float elevations = 2;
  if (this->elevations_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _elevations_cached_byte_size_, target);
  }
  for (int i = 0; i < this->elevations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->elevations(i), target);
  }

  // repeated float sediment = 4;
  if (this->sediment_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _sediment_cached_byte_size_, target);
  }
  for (int i = 0; i < this->sediment_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->sediment(i), target);
  }

  // repeated int32 plates = 5;
  if (this->plates_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _plates_cached_byte_size_, target);
  }
  for (int i = 0; i < this->plates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->plates(i), target);
  }

  // repeated float speeds = 6;
  if (this->speeds_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _speeds_cached_byte_size_, target);
  }
  for (int i = 0; i < this->speeds_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->speeds(i), target);
  }

  // optional double age = 7;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->age(), target);
  }

  // repeated float tempurature = 8;
  if (this->tempurature_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _tempurature_cached_byte_size_, target);
  }
  for (int i = 0; i < this->tempurature_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->tempurature(i), target);
  }

  // repeated float precipitation = 9;
  if (this->precipitation_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _precipitation_cached_byte_size_, target);
  }
  for (int i = 0; i < this->precipitation_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->precipitation(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:api.SimulationInfo)
  return target;
}

int SimulationInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:api.SimulationInfo)
  int total_size = 0;

  // optional double age = 7;
  if (this->age() != 0) {
    total_size += 1 + 8;
  }

  // repeated float elevations = 2;
  {
    int data_size = 0;
    data_size = 4 * this->elevations_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _elevations_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float sediment = 4;
  {
    int data_size = 0;
    data_size = 4 * this->sediment_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sediment_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 plates = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->plates_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->plates(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _plates_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float speeds = 6;
  {
    int data_size = 0;
    data_size = 4 * this->speeds_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _speeds_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float tempurature = 8;
  {
    int data_size = 0;
    data_size = 4 * this->tempurature_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _tempurature_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated float precipitation = 9;
  {
    int data_size = 0;
    data_size = 4 * this->precipitation_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _precipitation_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimulationInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:api.SimulationInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SimulationInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SimulationInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:api.SimulationInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:api.SimulationInfo)
    MergeFrom(*source);
  }
}

void SimulationInfo::MergeFrom(const SimulationInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:api.SimulationInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  elevations_.MergeFrom(from.elevations_);
  sediment_.MergeFrom(from.sediment_);
  plates_.MergeFrom(from.plates_);
  speeds_.MergeFrom(from.speeds_);
  tempurature_.MergeFrom(from.tempurature_);
  precipitation_.MergeFrom(from.precipitation_);
  if (from.age() != 0) {
    set_age(from.age());
  }
}

void SimulationInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:api.SimulationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulationInfo::CopyFrom(const SimulationInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:api.SimulationInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulationInfo::IsInitialized() const {

  return true;
}

void SimulationInfo::Swap(SimulationInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimulationInfo::InternalSwap(SimulationInfo* other) {
  elevations_.UnsafeArenaSwap(&other->elevations_);
  sediment_.UnsafeArenaSwap(&other->sediment_);
  plates_.UnsafeArenaSwap(&other->plates_);
  speeds_.UnsafeArenaSwap(&other->speeds_);
  std::swap(age_, other->age_);
  tempurature_.UnsafeArenaSwap(&other->tempurature_);
  precipitation_.UnsafeArenaSwap(&other->precipitation_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SimulationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimulationInfo_descriptor_;
  metadata.reflection = SimulationInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SimulationInfo

// repeated float elevations = 2;
int SimulationInfo::elevations_size() const {
  return elevations_.size();
}
void SimulationInfo::clear_elevations() {
  elevations_.Clear();
}
 float SimulationInfo::elevations(int index) const {
  // @@protoc_insertion_point(field_get:api.SimulationInfo.elevations)
  return elevations_.Get(index);
}
 void SimulationInfo::set_elevations(int index, float value) {
  elevations_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.SimulationInfo.elevations)
}
 void SimulationInfo::add_elevations(float value) {
  elevations_.Add(value);
  // @@protoc_insertion_point(field_add:api.SimulationInfo.elevations)
}
 const ::google::protobuf::RepeatedField< float >&
SimulationInfo::elevations() const {
  // @@protoc_insertion_point(field_list:api.SimulationInfo.elevations)
  return elevations_;
}
 ::google::protobuf::RepeatedField< float >*
SimulationInfo::mutable_elevations() {
  // @@protoc_insertion_point(field_mutable_list:api.SimulationInfo.elevations)
  return &elevations_;
}

// repeated float sediment = 4;
int SimulationInfo::sediment_size() const {
  return sediment_.size();
}
void SimulationInfo::clear_sediment() {
  sediment_.Clear();
}
 float SimulationInfo::sediment(int index) const {
  // @@protoc_insertion_point(field_get:api.SimulationInfo.sediment)
  return sediment_.Get(index);
}
 void SimulationInfo::set_sediment(int index, float value) {
  sediment_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.SimulationInfo.sediment)
}
 void SimulationInfo::add_sediment(float value) {
  sediment_.Add(value);
  // @@protoc_insertion_point(field_add:api.SimulationInfo.sediment)
}
 const ::google::protobuf::RepeatedField< float >&
SimulationInfo::sediment() const {
  // @@protoc_insertion_point(field_list:api.SimulationInfo.sediment)
  return sediment_;
}
 ::google::protobuf::RepeatedField< float >*
SimulationInfo::mutable_sediment() {
  // @@protoc_insertion_point(field_mutable_list:api.SimulationInfo.sediment)
  return &sediment_;
}

// repeated int32 plates = 5;
int SimulationInfo::plates_size() const {
  return plates_.size();
}
void SimulationInfo::clear_plates() {
  plates_.Clear();
}
 ::google::protobuf::int32 SimulationInfo::plates(int index) const {
  // @@protoc_insertion_point(field_get:api.SimulationInfo.plates)
  return plates_.Get(index);
}
 void SimulationInfo::set_plates(int index, ::google::protobuf::int32 value) {
  plates_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.SimulationInfo.plates)
}
 void SimulationInfo::add_plates(::google::protobuf::int32 value) {
  plates_.Add(value);
  // @@protoc_insertion_point(field_add:api.SimulationInfo.plates)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SimulationInfo::plates() const {
  // @@protoc_insertion_point(field_list:api.SimulationInfo.plates)
  return plates_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SimulationInfo::mutable_plates() {
  // @@protoc_insertion_point(field_mutable_list:api.SimulationInfo.plates)
  return &plates_;
}

// repeated float speeds = 6;
int SimulationInfo::speeds_size() const {
  return speeds_.size();
}
void SimulationInfo::clear_speeds() {
  speeds_.Clear();
}
 float SimulationInfo::speeds(int index) const {
  // @@protoc_insertion_point(field_get:api.SimulationInfo.speeds)
  return speeds_.Get(index);
}
 void SimulationInfo::set_speeds(int index, float value) {
  speeds_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.SimulationInfo.speeds)
}
 void SimulationInfo::add_speeds(float value) {
  speeds_.Add(value);
  // @@protoc_insertion_point(field_add:api.SimulationInfo.speeds)
}
 const ::google::protobuf::RepeatedField< float >&
SimulationInfo::speeds() const {
  // @@protoc_insertion_point(field_list:api.SimulationInfo.speeds)
  return speeds_;
}
 ::google::protobuf::RepeatedField< float >*
SimulationInfo::mutable_speeds() {
  // @@protoc_insertion_point(field_mutable_list:api.SimulationInfo.speeds)
  return &speeds_;
}

// optional double age = 7;
void SimulationInfo::clear_age() {
  age_ = 0;
}
 double SimulationInfo::age() const {
  // @@protoc_insertion_point(field_get:api.SimulationInfo.age)
  return age_;
}
 void SimulationInfo::set_age(double value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:api.SimulationInfo.age)
}

// repeated float tempurature = 8;
int SimulationInfo::tempurature_size() const {
  return tempurature_.size();
}
void SimulationInfo::clear_tempurature() {
  tempurature_.Clear();
}
 float SimulationInfo::tempurature(int index) const {
  // @@protoc_insertion_point(field_get:api.SimulationInfo.tempurature)
  return tempurature_.Get(index);
}
 void SimulationInfo::set_tempurature(int index, float value) {
  tempurature_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.SimulationInfo.tempurature)
}
 void SimulationInfo::add_tempurature(float value) {
  tempurature_.Add(value);
  // @@protoc_insertion_point(field_add:api.SimulationInfo.tempurature)
}
 const ::google::protobuf::RepeatedField< float >&
SimulationInfo::tempurature() const {
  // @@protoc_insertion_point(field_list:api.SimulationInfo.tempurature)
  return tempurature_;
}
 ::google::protobuf::RepeatedField< float >*
SimulationInfo::mutable_tempurature() {
  // @@protoc_insertion_point(field_mutable_list:api.SimulationInfo.tempurature)
  return &tempurature_;
}

// repeated float precipitation = 9;
int SimulationInfo::precipitation_size() const {
  return precipitation_.size();
}
void SimulationInfo::clear_precipitation() {
  precipitation_.Clear();
}
 float SimulationInfo::precipitation(int index) const {
  // @@protoc_insertion_point(field_get:api.SimulationInfo.precipitation)
  return precipitation_.Get(index);
}
 void SimulationInfo::set_precipitation(int index, float value) {
  precipitation_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.SimulationInfo.precipitation)
}
 void SimulationInfo::add_precipitation(float value) {
  precipitation_.Add(value);
  // @@protoc_insertion_point(field_add:api.SimulationInfo.precipitation)
}
 const ::google::protobuf::RepeatedField< float >&
SimulationInfo::precipitation() const {
  // @@protoc_insertion_point(field_list:api.SimulationInfo.precipitation)
  return precipitation_;
}
 ::google::protobuf::RepeatedField< float >*
SimulationInfo::mutable_precipitation() {
  // @@protoc_insertion_point(field_mutable_list:api.SimulationInfo.precipitation)
  return &precipitation_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace api

// @@protoc_insertion_point(global_scope)
