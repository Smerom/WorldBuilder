// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Basic.proto

#ifndef PROTOBUF_Basic_2eproto__INCLUDED
#define PROTOBUF_Basic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace api {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_Basic_2eproto();
void protobuf_AssignDesc_Basic_2eproto();
void protobuf_ShutdownFile_Basic_2eproto();

class Grid;
class GridVertex;
class SimulationInfo;

// ===================================================================

class GridVertex : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.GridVertex) */ {
 public:
  GridVertex();
  virtual ~GridVertex();

  GridVertex(const GridVertex& from);

  inline GridVertex& operator=(const GridVertex& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GridVertex& default_instance();

  void Swap(GridVertex* other);

  // implements Message ----------------------------------------------

  inline GridVertex* New() const { return New(NULL); }

  GridVertex* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GridVertex& from);
  void MergeFrom(const GridVertex& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GridVertex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // optional float xCoord = 2;
  void clear_xcoord();
  static const int kXCoordFieldNumber = 2;
  float xcoord() const;
  void set_xcoord(float value);

  // optional float yCoord = 3;
  void clear_ycoord();
  static const int kYCoordFieldNumber = 3;
  float ycoord() const;
  void set_ycoord(float value);

  // optional float zCoord = 4;
  void clear_zcoord();
  static const int kZCoordFieldNumber = 4;
  float zcoord() const;
  void set_zcoord(float value);

  // repeated uint32 neighbors = 5;
  int neighbors_size() const;
  void clear_neighbors();
  static const int kNeighborsFieldNumber = 5;
  ::google::protobuf::uint32 neighbors(int index) const;
  void set_neighbors(int index, ::google::protobuf::uint32 value);
  void add_neighbors(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      neighbors() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_neighbors();

  // @@protoc_insertion_point(class_scope:api.GridVertex)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::uint32 index_;
  float xcoord_;
  float ycoord_;
  float zcoord_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > neighbors_;
  mutable int _neighbors_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Basic_2eproto();
  friend void protobuf_AssignDesc_Basic_2eproto();
  friend void protobuf_ShutdownFile_Basic_2eproto();

  void InitAsDefaultInstance();
  static GridVertex* default_instance_;
};
// -------------------------------------------------------------------

class Grid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.Grid) */ {
 public:
  Grid();
  virtual ~Grid();

  Grid(const Grid& from);

  inline Grid& operator=(const Grid& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Grid& default_instance();

  void Swap(Grid* other);

  // implements Message ----------------------------------------------

  inline Grid* New() const { return New(NULL); }

  Grid* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Grid& from);
  void MergeFrom(const Grid& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Grid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 totalVerts = 1;
  void clear_totalverts();
  static const int kTotalVertsFieldNumber = 1;
  ::google::protobuf::uint32 totalverts() const;
  void set_totalverts(::google::protobuf::uint32 value);

  // repeated .api.GridVertex vertices = 3;
  int vertices_size() const;
  void clear_vertices();
  static const int kVerticesFieldNumber = 3;
  const ::api::GridVertex& vertices(int index) const;
  ::api::GridVertex* mutable_vertices(int index);
  ::api::GridVertex* add_vertices();
  ::google::protobuf::RepeatedPtrField< ::api::GridVertex >*
      mutable_vertices();
  const ::google::protobuf::RepeatedPtrField< ::api::GridVertex >&
      vertices() const;

  // @@protoc_insertion_point(class_scope:api.Grid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::api::GridVertex > vertices_;
  ::google::protobuf::uint32 totalverts_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Basic_2eproto();
  friend void protobuf_AssignDesc_Basic_2eproto();
  friend void protobuf_ShutdownFile_Basic_2eproto();

  void InitAsDefaultInstance();
  static Grid* default_instance_;
};
// -------------------------------------------------------------------

class SimulationInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:api.SimulationInfo) */ {
 public:
  SimulationInfo();
  virtual ~SimulationInfo();

  SimulationInfo(const SimulationInfo& from);

  inline SimulationInfo& operator=(const SimulationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimulationInfo& default_instance();

  void Swap(SimulationInfo* other);

  // implements Message ----------------------------------------------

  inline SimulationInfo* New() const { return New(NULL); }

  SimulationInfo* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimulationInfo& from);
  void MergeFrom(const SimulationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SimulationInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float elevations = 2;
  int elevations_size() const;
  void clear_elevations();
  static const int kElevationsFieldNumber = 2;
  float elevations(int index) const;
  void set_elevations(int index, float value);
  void add_elevations(float value);
  const ::google::protobuf::RepeatedField< float >&
      elevations() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_elevations();

  // repeated float sediment = 4;
  int sediment_size() const;
  void clear_sediment();
  static const int kSedimentFieldNumber = 4;
  float sediment(int index) const;
  void set_sediment(int index, float value);
  void add_sediment(float value);
  const ::google::protobuf::RepeatedField< float >&
      sediment() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_sediment();

  // repeated int32 plates = 5;
  int plates_size() const;
  void clear_plates();
  static const int kPlatesFieldNumber = 5;
  ::google::protobuf::int32 plates(int index) const;
  void set_plates(int index, ::google::protobuf::int32 value);
  void add_plates(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      plates() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_plates();

  // repeated float speeds = 6;
  int speeds_size() const;
  void clear_speeds();
  static const int kSpeedsFieldNumber = 6;
  float speeds(int index) const;
  void set_speeds(int index, float value);
  void add_speeds(float value);
  const ::google::protobuf::RepeatedField< float >&
      speeds() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_speeds();

  // optional double age = 7;
  void clear_age();
  static const int kAgeFieldNumber = 7;
  double age() const;
  void set_age(double value);

  // repeated float tempurature = 8;
  int tempurature_size() const;
  void clear_tempurature();
  static const int kTempuratureFieldNumber = 8;
  float tempurature(int index) const;
  void set_tempurature(int index, float value);
  void add_tempurature(float value);
  const ::google::protobuf::RepeatedField< float >&
      tempurature() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_tempurature();

  // repeated float precipitation = 9;
  int precipitation_size() const;
  void clear_precipitation();
  static const int kPrecipitationFieldNumber = 9;
  float precipitation(int index) const;
  void set_precipitation(int index, float value);
  void add_precipitation(float value);
  const ::google::protobuf::RepeatedField< float >&
      precipitation() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_precipitation();

  // @@protoc_insertion_point(class_scope:api.SimulationInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedField< float > elevations_;
  mutable int _elevations_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > sediment_;
  mutable int _sediment_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > plates_;
  mutable int _plates_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > speeds_;
  mutable int _speeds_cached_byte_size_;
  double age_;
  ::google::protobuf::RepeatedField< float > tempurature_;
  mutable int _tempurature_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > precipitation_;
  mutable int _precipitation_cached_byte_size_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_Basic_2eproto();
  friend void protobuf_AssignDesc_Basic_2eproto();
  friend void protobuf_ShutdownFile_Basic_2eproto();

  void InitAsDefaultInstance();
  static SimulationInfo* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GridVertex

// optional uint32 index = 1;
inline void GridVertex::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 GridVertex::index() const {
  // @@protoc_insertion_point(field_get:api.GridVertex.index)
  return index_;
}
inline void GridVertex::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:api.GridVertex.index)
}

// optional float xCoord = 2;
inline void GridVertex::clear_xcoord() {
  xcoord_ = 0;
}
inline float GridVertex::xcoord() const {
  // @@protoc_insertion_point(field_get:api.GridVertex.xCoord)
  return xcoord_;
}
inline void GridVertex::set_xcoord(float value) {
  
  xcoord_ = value;
  // @@protoc_insertion_point(field_set:api.GridVertex.xCoord)
}

// optional float yCoord = 3;
inline void GridVertex::clear_ycoord() {
  ycoord_ = 0;
}
inline float GridVertex::ycoord() const {
  // @@protoc_insertion_point(field_get:api.GridVertex.yCoord)
  return ycoord_;
}
inline void GridVertex::set_ycoord(float value) {
  
  ycoord_ = value;
  // @@protoc_insertion_point(field_set:api.GridVertex.yCoord)
}

// optional float zCoord = 4;
inline void GridVertex::clear_zcoord() {
  zcoord_ = 0;
}
inline float GridVertex::zcoord() const {
  // @@protoc_insertion_point(field_get:api.GridVertex.zCoord)
  return zcoord_;
}
inline void GridVertex::set_zcoord(float value) {
  
  zcoord_ = value;
  // @@protoc_insertion_point(field_set:api.GridVertex.zCoord)
}

// repeated uint32 neighbors = 5;
inline int GridVertex::neighbors_size() const {
  return neighbors_.size();
}
inline void GridVertex::clear_neighbors() {
  neighbors_.Clear();
}
inline ::google::protobuf::uint32 GridVertex::neighbors(int index) const {
  // @@protoc_insertion_point(field_get:api.GridVertex.neighbors)
  return neighbors_.Get(index);
}
inline void GridVertex::set_neighbors(int index, ::google::protobuf::uint32 value) {
  neighbors_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.GridVertex.neighbors)
}
inline void GridVertex::add_neighbors(::google::protobuf::uint32 value) {
  neighbors_.Add(value);
  // @@protoc_insertion_point(field_add:api.GridVertex.neighbors)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
GridVertex::neighbors() const {
  // @@protoc_insertion_point(field_list:api.GridVertex.neighbors)
  return neighbors_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
GridVertex::mutable_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:api.GridVertex.neighbors)
  return &neighbors_;
}

// -------------------------------------------------------------------

// Grid

// optional uint32 totalVerts = 1;
inline void Grid::clear_totalverts() {
  totalverts_ = 0u;
}
inline ::google::protobuf::uint32 Grid::totalverts() const {
  // @@protoc_insertion_point(field_get:api.Grid.totalVerts)
  return totalverts_;
}
inline void Grid::set_totalverts(::google::protobuf::uint32 value) {
  
  totalverts_ = value;
  // @@protoc_insertion_point(field_set:api.Grid.totalVerts)
}

// repeated .api.GridVertex vertices = 3;
inline int Grid::vertices_size() const {
  return vertices_.size();
}
inline void Grid::clear_vertices() {
  vertices_.Clear();
}
inline const ::api::GridVertex& Grid::vertices(int index) const {
  // @@protoc_insertion_point(field_get:api.Grid.vertices)
  return vertices_.Get(index);
}
inline ::api::GridVertex* Grid::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:api.Grid.vertices)
  return vertices_.Mutable(index);
}
inline ::api::GridVertex* Grid::add_vertices() {
  // @@protoc_insertion_point(field_add:api.Grid.vertices)
  return vertices_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::api::GridVertex >*
Grid::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:api.Grid.vertices)
  return &vertices_;
}
inline const ::google::protobuf::RepeatedPtrField< ::api::GridVertex >&
Grid::vertices() const {
  // @@protoc_insertion_point(field_list:api.Grid.vertices)
  return vertices_;
}

// -------------------------------------------------------------------

// SimulationInfo

// repeated float elevations = 2;
inline int SimulationInfo::elevations_size() const {
  return elevations_.size();
}
inline void SimulationInfo::clear_elevations() {
  elevations_.Clear();
}
inline float SimulationInfo::elevations(int index) const {
  // @@protoc_insertion_point(field_get:api.SimulationInfo.elevations)
  return elevations_.Get(index);
}
inline void SimulationInfo::set_elevations(int index, float value) {
  elevations_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.SimulationInfo.elevations)
}
inline void SimulationInfo::add_elevations(float value) {
  elevations_.Add(value);
  // @@protoc_insertion_point(field_add:api.SimulationInfo.elevations)
}
inline const ::google::protobuf::RepeatedField< float >&
SimulationInfo::elevations() const {
  // @@protoc_insertion_point(field_list:api.SimulationInfo.elevations)
  return elevations_;
}
inline ::google::protobuf::RepeatedField< float >*
SimulationInfo::mutable_elevations() {
  // @@protoc_insertion_point(field_mutable_list:api.SimulationInfo.elevations)
  return &elevations_;
}

// repeated float sediment = 4;
inline int SimulationInfo::sediment_size() const {
  return sediment_.size();
}
inline void SimulationInfo::clear_sediment() {
  sediment_.Clear();
}
inline float SimulationInfo::sediment(int index) const {
  // @@protoc_insertion_point(field_get:api.SimulationInfo.sediment)
  return sediment_.Get(index);
}
inline void SimulationInfo::set_sediment(int index, float value) {
  sediment_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.SimulationInfo.sediment)
}
inline void SimulationInfo::add_sediment(float value) {
  sediment_.Add(value);
  // @@protoc_insertion_point(field_add:api.SimulationInfo.sediment)
}
inline const ::google::protobuf::RepeatedField< float >&
SimulationInfo::sediment() const {
  // @@protoc_insertion_point(field_list:api.SimulationInfo.sediment)
  return sediment_;
}
inline ::google::protobuf::RepeatedField< float >*
SimulationInfo::mutable_sediment() {
  // @@protoc_insertion_point(field_mutable_list:api.SimulationInfo.sediment)
  return &sediment_;
}

// repeated int32 plates = 5;
inline int SimulationInfo::plates_size() const {
  return plates_.size();
}
inline void SimulationInfo::clear_plates() {
  plates_.Clear();
}
inline ::google::protobuf::int32 SimulationInfo::plates(int index) const {
  // @@protoc_insertion_point(field_get:api.SimulationInfo.plates)
  return plates_.Get(index);
}
inline void SimulationInfo::set_plates(int index, ::google::protobuf::int32 value) {
  plates_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.SimulationInfo.plates)
}
inline void SimulationInfo::add_plates(::google::protobuf::int32 value) {
  plates_.Add(value);
  // @@protoc_insertion_point(field_add:api.SimulationInfo.plates)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SimulationInfo::plates() const {
  // @@protoc_insertion_point(field_list:api.SimulationInfo.plates)
  return plates_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SimulationInfo::mutable_plates() {
  // @@protoc_insertion_point(field_mutable_list:api.SimulationInfo.plates)
  return &plates_;
}

// repeated float speeds = 6;
inline int SimulationInfo::speeds_size() const {
  return speeds_.size();
}
inline void SimulationInfo::clear_speeds() {
  speeds_.Clear();
}
inline float SimulationInfo::speeds(int index) const {
  // @@protoc_insertion_point(field_get:api.SimulationInfo.speeds)
  return speeds_.Get(index);
}
inline void SimulationInfo::set_speeds(int index, float value) {
  speeds_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.SimulationInfo.speeds)
}
inline void SimulationInfo::add_speeds(float value) {
  speeds_.Add(value);
  // @@protoc_insertion_point(field_add:api.SimulationInfo.speeds)
}
inline const ::google::protobuf::RepeatedField< float >&
SimulationInfo::speeds() const {
  // @@protoc_insertion_point(field_list:api.SimulationInfo.speeds)
  return speeds_;
}
inline ::google::protobuf::RepeatedField< float >*
SimulationInfo::mutable_speeds() {
  // @@protoc_insertion_point(field_mutable_list:api.SimulationInfo.speeds)
  return &speeds_;
}

// optional double age = 7;
inline void SimulationInfo::clear_age() {
  age_ = 0;
}
inline double SimulationInfo::age() const {
  // @@protoc_insertion_point(field_get:api.SimulationInfo.age)
  return age_;
}
inline void SimulationInfo::set_age(double value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:api.SimulationInfo.age)
}

// repeated float tempurature = 8;
inline int SimulationInfo::tempurature_size() const {
  return tempurature_.size();
}
inline void SimulationInfo::clear_tempurature() {
  tempurature_.Clear();
}
inline float SimulationInfo::tempurature(int index) const {
  // @@protoc_insertion_point(field_get:api.SimulationInfo.tempurature)
  return tempurature_.Get(index);
}
inline void SimulationInfo::set_tempurature(int index, float value) {
  tempurature_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.SimulationInfo.tempurature)
}
inline void SimulationInfo::add_tempurature(float value) {
  tempurature_.Add(value);
  // @@protoc_insertion_point(field_add:api.SimulationInfo.tempurature)
}
inline const ::google::protobuf::RepeatedField< float >&
SimulationInfo::tempurature() const {
  // @@protoc_insertion_point(field_list:api.SimulationInfo.tempurature)
  return tempurature_;
}
inline ::google::protobuf::RepeatedField< float >*
SimulationInfo::mutable_tempurature() {
  // @@protoc_insertion_point(field_mutable_list:api.SimulationInfo.tempurature)
  return &tempurature_;
}

// repeated float precipitation = 9;
inline int SimulationInfo::precipitation_size() const {
  return precipitation_.size();
}
inline void SimulationInfo::clear_precipitation() {
  precipitation_.Clear();
}
inline float SimulationInfo::precipitation(int index) const {
  // @@protoc_insertion_point(field_get:api.SimulationInfo.precipitation)
  return precipitation_.Get(index);
}
inline void SimulationInfo::set_precipitation(int index, float value) {
  precipitation_.Set(index, value);
  // @@protoc_insertion_point(field_set:api.SimulationInfo.precipitation)
}
inline void SimulationInfo::add_precipitation(float value) {
  precipitation_.Add(value);
  // @@protoc_insertion_point(field_add:api.SimulationInfo.precipitation)
}
inline const ::google::protobuf::RepeatedField< float >&
SimulationInfo::precipitation() const {
  // @@protoc_insertion_point(field_list:api.SimulationInfo.precipitation)
  return precipitation_;
}
inline ::google::protobuf::RepeatedField< float >*
SimulationInfo::mutable_precipitation() {
  // @@protoc_insertion_point(field_mutable_list:api.SimulationInfo.precipitation)
  return &precipitation_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Basic_2eproto__INCLUDED
