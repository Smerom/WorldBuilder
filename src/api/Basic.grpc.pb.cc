// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: Basic.proto

#include "Basic.pb.h"
#include "Basic.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace api {

static const char* WorldBuilder_method_names[] = {
  "/api.WorldBuilder/GenerateWorld",
};

std::unique_ptr< WorldBuilder::Stub> WorldBuilder::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< WorldBuilder::Stub> stub(new WorldBuilder::Stub(channel));
  return stub;
}

WorldBuilder::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GenerateWorld_(WorldBuilder_method_names[0], ::grpc::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::ClientReaderWriter< ::api::Grid, ::api::SimulationInfo>* WorldBuilder::Stub::GenerateWorldRaw(::grpc::ClientContext* context) {
  return new ::grpc::ClientReaderWriter< ::api::Grid, ::api::SimulationInfo>(channel_.get(), rpcmethod_GenerateWorld_, context);
}

::grpc::ClientAsyncReaderWriter< ::api::Grid, ::api::SimulationInfo>* WorldBuilder::Stub::AsyncGenerateWorldRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReaderWriter< ::api::Grid, ::api::SimulationInfo>(channel_.get(), cq, rpcmethod_GenerateWorld_, context, tag);
}

WorldBuilder::Service::Service() {
  (void)WorldBuilder_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      WorldBuilder_method_names[0],
      ::grpc::RpcMethod::BIDI_STREAMING,
      new ::grpc::BidiStreamingHandler< WorldBuilder::Service, ::api::Grid, ::api::SimulationInfo>(
          std::mem_fn(&WorldBuilder::Service::GenerateWorld), this)));
}

WorldBuilder::Service::~Service() {
}

::grpc::Status WorldBuilder::Service::GenerateWorld(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::api::SimulationInfo, ::api::Grid>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace api

